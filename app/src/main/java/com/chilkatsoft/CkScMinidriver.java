/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.chilkatsoft;

public class CkScMinidriver {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CkScMinidriver(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CkScMinidriver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        chilkatJNI.delete_CkScMinidriver(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public CkScMinidriver() {
    this(chilkatJNI.new_CkScMinidriver(), true);
  }

  public void LastErrorXml(CkString str) {
    chilkatJNI.CkScMinidriver_LastErrorXml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void LastErrorHtml(CkString str) {
    chilkatJNI.CkScMinidriver_LastErrorHtml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void LastErrorText(CkString str) {
    chilkatJNI.CkScMinidriver_LastErrorText(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public void get_Atr(CkString str) {
    chilkatJNI.CkScMinidriver_get_Atr(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String atr() {
    return chilkatJNI.CkScMinidriver_atr(swigCPtr, this);
  }

  public void get_CardName(CkString str) {
    chilkatJNI.CkScMinidriver_get_CardName(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String cardName() {
    return chilkatJNI.CkScMinidriver_cardName(swigCPtr, this);
  }

  public void get_DebugLogFilePath(CkString str) {
    chilkatJNI.CkScMinidriver_get_DebugLogFilePath(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String debugLogFilePath() {
    return chilkatJNI.CkScMinidriver_debugLogFilePath(swigCPtr, this);
  }

  public void put_DebugLogFilePath(String newVal) {
    chilkatJNI.CkScMinidriver_put_DebugLogFilePath(swigCPtr, this, newVal);
  }

  public void get_LastErrorHtml(CkString str) {
    chilkatJNI.CkScMinidriver_get_LastErrorHtml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String lastErrorHtml() {
    return chilkatJNI.CkScMinidriver_lastErrorHtml(swigCPtr, this);
  }

  public void get_LastErrorText(CkString str) {
    chilkatJNI.CkScMinidriver_get_LastErrorText(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String lastErrorText() {
    return chilkatJNI.CkScMinidriver_lastErrorText(swigCPtr, this);
  }

  public void get_LastErrorXml(CkString str) {
    chilkatJNI.CkScMinidriver_get_LastErrorXml(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String lastErrorXml() {
    return chilkatJNI.CkScMinidriver_lastErrorXml(swigCPtr, this);
  }

  public boolean get_LastMethodSuccess() {
    return chilkatJNI.CkScMinidriver_get_LastMethodSuccess(swigCPtr, this);
  }

  public void put_LastMethodSuccess(boolean newVal) {
    chilkatJNI.CkScMinidriver_put_LastMethodSuccess(swigCPtr, this, newVal);
  }

  public int get_MaxContainers() {
    return chilkatJNI.CkScMinidriver_get_MaxContainers(swigCPtr, this);
  }

  public void get_RsaPaddingHash(CkString str) {
    chilkatJNI.CkScMinidriver_get_RsaPaddingHash(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String rsaPaddingHash() {
    return chilkatJNI.CkScMinidriver_rsaPaddingHash(swigCPtr, this);
  }

  public void put_RsaPaddingHash(String newVal) {
    chilkatJNI.CkScMinidriver_put_RsaPaddingHash(swigCPtr, this, newVal);
  }

  public void get_RsaPaddingScheme(CkString str) {
    chilkatJNI.CkScMinidriver_get_RsaPaddingScheme(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String rsaPaddingScheme() {
    return chilkatJNI.CkScMinidriver_rsaPaddingScheme(swigCPtr, this);
  }

  public void put_RsaPaddingScheme(String newVal) {
    chilkatJNI.CkScMinidriver_put_RsaPaddingScheme(swigCPtr, this, newVal);
  }

  public void get_UncommonOptions(CkString str) {
    chilkatJNI.CkScMinidriver_get_UncommonOptions(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String uncommonOptions() {
    return chilkatJNI.CkScMinidriver_uncommonOptions(swigCPtr, this);
  }

  public void put_UncommonOptions(String newVal) {
    chilkatJNI.CkScMinidriver_put_UncommonOptions(swigCPtr, this, newVal);
  }

  public boolean get_VerboseLogging() {
    return chilkatJNI.CkScMinidriver_get_VerboseLogging(swigCPtr, this);
  }

  public void put_VerboseLogging(boolean newVal) {
    chilkatJNI.CkScMinidriver_put_VerboseLogging(swigCPtr, this, newVal);
  }

  public void get_Version(CkString str) {
    chilkatJNI.CkScMinidriver_get_Version(swigCPtr, this, CkString.getCPtr(str), str);
  }

  public String version() {
    return chilkatJNI.CkScMinidriver_version(swigCPtr, this);
  }

  public boolean AcquireContext(String readerName) {
    return chilkatJNI.CkScMinidriver_AcquireContext(swigCPtr, this, readerName);
  }

  public boolean CardDeleteFile(String dirName, String fileName) {
    return chilkatJNI.CkScMinidriver_CardDeleteFile(swigCPtr, this, dirName, fileName);
  }

  public boolean DeleteCert(CkCert cert, boolean delPrivKey) {
    return chilkatJNI.CkScMinidriver_DeleteCert(swigCPtr, this, CkCert.getCPtr(cert), cert, delPrivKey);
  }

  public boolean DeleteContext() {
    return chilkatJNI.CkScMinidriver_DeleteContext(swigCPtr, this);
  }

  public boolean DeleteKeyContainer(int containerIndex) {
    return chilkatJNI.CkScMinidriver_DeleteKeyContainer(swigCPtr, this, containerIndex);
  }

  public boolean EnumFiles(String dirName, CkStringTable st) {
    return chilkatJNI.CkScMinidriver_EnumFiles(swigCPtr, this, dirName, CkStringTable.getCPtr(st), st);
  }

  public boolean FindCert(String certPart, String partValue, CkCert cert) {
    return chilkatJNI.CkScMinidriver_FindCert(swigCPtr, this, certPart, partValue, CkCert.getCPtr(cert), cert);
  }

  public boolean GenerateKey(int containerIndex, String keySpec, String keyType, int keySize, String pinId) {
    return chilkatJNI.CkScMinidriver_GenerateKey(swigCPtr, this, containerIndex, keySpec, keyType, keySize, pinId);
  }

  public boolean GetCardProperties(CkJsonObject json) {
    return chilkatJNI.CkScMinidriver_GetCardProperties(swigCPtr, this, CkJsonObject.getCPtr(json), json);
  }

  public boolean GetCert(int containerIndex, String keySpec, CkCert cert) {
    return chilkatJNI.CkScMinidriver_GetCert(swigCPtr, this, containerIndex, keySpec, CkCert.getCPtr(cert), cert);
  }

  public boolean GetContainerKeys(int containerIndex, CkPublicKey sigKey, CkPublicKey kexKey) {
    return chilkatJNI.CkScMinidriver_GetContainerKeys(swigCPtr, this, containerIndex, CkPublicKey.getCPtr(sigKey), sigKey, CkPublicKey.getCPtr(kexKey), kexKey);
  }

  public boolean GetCspContainerMap(CkJsonObject json) {
    return chilkatJNI.CkScMinidriver_GetCspContainerMap(swigCPtr, this, CkJsonObject.getCPtr(json), json);
  }

  public boolean ImportCert(CkCert cert, int containerIndex, String keySpec, String pinId) {
    return chilkatJNI.CkScMinidriver_ImportCert(swigCPtr, this, CkCert.getCPtr(cert), cert, containerIndex, keySpec, pinId);
  }

  public boolean ImportKey(int containerIndex, String keySpec, CkPrivateKey privKey, String pinId) {
    return chilkatJNI.CkScMinidriver_ImportKey(swigCPtr, this, containerIndex, keySpec, CkPrivateKey.getCPtr(privKey), privKey, pinId);
  }

  public boolean ListCerts(String certPart, CkStringTable st) {
    return chilkatJNI.CkScMinidriver_ListCerts(swigCPtr, this, certPart, CkStringTable.getCPtr(st), st);
  }

  public int PinAuthenticate(String pinId, String pin) {
    return chilkatJNI.CkScMinidriver_PinAuthenticate(swigCPtr, this, pinId, pin);
  }

  public int PinAuthenticateHex(String pinId, String pin) {
    return chilkatJNI.CkScMinidriver_PinAuthenticateHex(swigCPtr, this, pinId, pin);
  }

  public int PinChange(String pinId, String currentPin, String newPin) {
    return chilkatJNI.CkScMinidriver_PinChange(swigCPtr, this, pinId, currentPin, newPin);
  }

  public boolean PinDeauthenticate(String pinId) {
    return chilkatJNI.CkScMinidriver_PinDeauthenticate(swigCPtr, this, pinId);
  }

  public boolean ReadFile(String dirName, String fileName, CkBinData bd) {
    return chilkatJNI.CkScMinidriver_ReadFile(swigCPtr, this, dirName, fileName, CkBinData.getCPtr(bd), bd);
  }

  public boolean SaveLastError(String path) {
    return chilkatJNI.CkScMinidriver_SaveLastError(swigCPtr, this, path);
  }

  public boolean SignData(int containerIndex, String keySpec, String hashDataAlg, CkBinData bdData, CkBinData bdSignedData) {
    return chilkatJNI.CkScMinidriver_SignData(swigCPtr, this, containerIndex, keySpec, hashDataAlg, CkBinData.getCPtr(bdData), bdData, CkBinData.getCPtr(bdSignedData), bdSignedData);
  }

  public boolean WriteFile(String dirName, String fileName, CkBinData bd) {
    return chilkatJNI.CkScMinidriver_WriteFile(swigCPtr, this, dirName, fileName, CkBinData.getCPtr(bd), bd);
  }

}
